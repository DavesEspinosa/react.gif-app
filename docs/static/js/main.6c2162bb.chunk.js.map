{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","onChange","target","value","type","getGifs","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMA+BeA,MA5Bf,YAAyC,IAAlBC,EAAiB,EAAjBA,cAAiB,EACFC,mBAAS,IADP,mBAC/BC,EAD+B,KACnBC,EADmB,KAgBtC,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAeP,GAAf,mBAA8BO,OAC5CN,EAAc,MAKhB,SACE,uBAAOO,SAfe,SAACL,GACzBF,EAAcE,EAAEM,OAAOC,QAceC,KAAK,OAAOD,MAAOV,O,+BCrBhDY,EAAO,uCAAG,WAAOL,GAAP,uBAAAM,EAAA,6DACfC,EADe,iDACiCC,UACpDR,GAFmB,+DAIES,MAAMF,GAJR,cAIfG,EAJe,gBAKEA,EAASC,OALX,uBAKbC,EALa,EAKbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAadM,GAbc,4CAAH,sDCWLO,MATf,YAAyC,EAAlBJ,GAAmB,IAAfC,EAAc,EAAdA,MAAOV,EAAO,EAAPA,IAChC,OACE,sBAAKc,UAAU,kDAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCoBKO,MArBf,YAAgC,IAAbxB,EAAY,EAAZA,SAAY,ECDH,SAACA,GAAc,IAAD,EACdR,mBAAS,CACjCoB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAVAC,qBAAU,WACRvB,EAAQL,GAAU6B,MAAK,SAAChB,GAAD,OACrBc,EAAS,CACPf,KAAMC,EACNY,SAAS,SAIZ,CAACzB,IAEG0B,EDZ2BI,CAAa9B,GAAjCkB,EAHe,EAGrBN,KAAca,EAHO,EAGPA,QAKtB,OACE,qCACE,6BAAKzB,IACJyB,GAAW,wCACZ,qBAAKJ,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEMjBe,MArBf,WAAyB,IAAD,EACcvC,mBAAS,CAAC,cADxB,mBACfwC,EADe,KACHzC,EADG,KAOtB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACGyC,EAAWlB,KAAI,SAACd,GACf,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCb/BiC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.6c2162bb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction AddCategory({ setCategories }) {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((category) => [inputValue, ...category]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input onChange={handleInputChange} type=\"text\" value={inputValue} />\n    </form>\n  );\n}\n\n//To mark as a necessary the prop passing from the parent.\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=xN5tleUDmvmsCod4sd1sDou7UZkcpMhy`;\n  const response = await fetch(url);\n  const { data } = await response.json();\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n  return gifs;\n};\n","import React from \"react\";\n\nfunction GifGridItem({ id, title, url }) {\n  return (\n    <div className=\"card animate__animated animate__animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n}\n\nexport default GifGridItem;\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n//import { getGifs } from \"../helpers/getGifs\";\nimport GifGridItem from \"./GifGridItem\";\n\nfunction GifGrid({ category }) {\n  //Solo se ejecutar√° cuando el componente es renderizado por primera vez\n\n  const { data: images, loading } = useFetchGifs(category);\n  /*  const [images, setImages] = useState([]);\n\n  getGifs(); */\n\n  return (\n    <>\n      <h4>{category}</h4>\n      {loading && <p>Loading</p>}\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default GifGrid;\n","//Custom hooks\nimport { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((gifs) =>\n      setState({\n        data: gifs,\n        loading: false,\n      })\n    );\n    //getGifs(category).then(setImages);x\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\n\nfunction GifExpertApp() {\n  const [categories, setCategories] = useState([\"One Punch\"]);\n\n  /*  const handleAdd = () => {\n    setCategories([...categories, \"Something to add\"]);\n  }; */\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map((category) => {\n          return <GifGrid key={category} category={category} />;\n        })}\n      </ol>\n    </>\n  );\n}\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp.jsx\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}